{"version":3,"sources":["sort_objects/sort_objects_by_property.js","sort_objects/sort_objects_by_property_and_position.js","sort_objects.js"],"names":["sort_objects_by_property","arr","prop1_key","prop1_asc","immutable","sort","sort_objects_by_property__helper","bind","a","b","a_rating","b_rating","rating_key","multiply_position","that","obj","rate","min_rating","max_rating","i","delta_rating","median_rating","min_index","max_index","length","index","delta_index","sort_strings_by_rating_and_position__helper","a_index"],"mappings":"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","file":"sort_objects.js","sourceRoot":"../src","sourcesContent":["/**\n * Sort array of objects by property\n *    ```\n *      let list = [{name:'Pasha',age:8}, {name:'Masha',age:9}]\n *      sort_objects_by_property(list, 'age') // Masha will move up to first place\n *    ```\n *    Like `sort_objects_by_property_and_position()`, but without caring about the position.\n *    NOTE: your original array will be modified. Use [...arr] destructuring to keep immutable.\n * @param arr {Array.<Object>} - array of objects to be sorted\n * @param prop1_key {string} - property to use, to sort by. Each object in array must contain this key\n * @param prop1_asc {boolean} - by default, will sort DESC, but if this is true, will sort ASC\n * @param immutable {boolean} - Set this to `true` to make this a pure function, and immutable.\n *    Otherwise, THIS IS NOT A PURE FUNCTION. By default it modifies the original array.\n * @return {Array.<Object>} - array of objects, sorted\n */\nexport default function sort_objects_by_property(arr, prop1_key, prop1_asc = false, immutable=false) {\n  if (!arr) return []\n  if (immutable) arr = [...arr]\n  return arr.sort(sort_objects_by_property__helper.bind({ arr, prop1_key, prop1_asc }));\n};\n// helper function:\nfunction sort_objects_by_property__helper(a, b) {\n  // sort by rating\n  let a_rating = a[this.prop1_key];\n  let b_rating = b[this.prop1_key];\n  // sort order\n  if (this.prop1_asc) {\n    // prefer lower number\n    // if b is lower, then rate it better than a\n    return a_rating - b_rating;\n  } else {\n    // prefer higher number\n    // if b is higher, then rate it better than a\n    return b_rating - a_rating;\n  }\n}\n","/**\n * Sort array of strings by separate dictionary of [{string:rating},], and\n * also by position in array. Items at front of array will be rated higher.\n * @param arr {Array.<String>} - array of strings\n * @param rating_key {string} - which property of object to use as sort rating (must be a number)\n * @param multiply_position {number} - make position x times more important than rating\n * @param immutable {boolean} - Set this to `true` to make this a pure function, and immutable.\n *    Otherwise, THIS IS NOT A PURE FUNCTION. By default it modifies the original array.\n * @return {Array.<String>} - array of strings\n */\nexport default function (arr, rating_key, multiply_position = 1, immutable=false) {\n  if (!arr) return []\n  if (immutable) arr = [...arr]\n  let that = {}\n\n  // rating_key\n  that.min_rating = null\n  that.max_rating = null\n  that.rating_key = rating_key\n  for (let obj of arr) {\n    let rate = obj[rating_key]\n    // compare ratings to each other\n    if (that.min_rating === null || rate < that.min_rating) {\n      that.min_rating = rate\n    }\n    if (that.max_rating === null || rate > that.max_rating) {\n      that.max_rating = rate\n    }\n  }\n  that.delta_rating = that.max_rating - that.min_rating\n  that.median_rating = that.min_rating + (that.delta_rating/2)\n\n  // prepare position\n  that.min_index = 0\n  that.max_index = arr.length - 1\n  for (let i in arr) {\n    // count up - first item = 0, last item = (length-1)\n    arr[i].index = i\n  }\n  that.delta_index = that.max_index - that.min_index\n  that.multiply_position = multiply_position\n\n  // sort\n  return arr.sort(sort_strings_by_rating_and_position__helper.bind(that))\n};\n\n// helper function:\nfunction sort_strings_by_rating_and_position__helper(a, b) {\n\n  // higher == better\n  // normalized to 0-1 range\n  // highest rating gets 1, lowest rating gets 0\n  let a_rating = (this.delta_rating - (this.max_rating - (typeof a[this.rating_key]!=='undefined' ? a[this.rating_key] : this.median_rating))) / this.delta_rating\n  let b_rating = (this.delta_rating - (this.max_rating - (typeof b[this.rating_key]!=='undefined' ? b[this.rating_key] : this.median_rating))) / this.delta_rating\n\n  // higher == better\n  // normalized to 0-1 range\n  // lowest index gets 1, highest index gets 0\n  // (multiply_position to make position score more important than rating score)\n  let a_index = ((this.max_index - a.index) / this.delta_index) * this.multiply_position\n  let b_index = ((this.max_index - b.index) / this.delta_index) * this.multiply_position\n\n  // combine the two\n  // if b is higher, then sort it closer to front of array compared to a\n  return (b_rating + b_index) - (a_rating + a_index)\n}\n","import sort_objects_by_property from './sort_objects/sort_objects_by_property.js'\nimport sort_objects_by_property_and_position from './sort_objects/sort_objects_by_property_and_position.js'\n\nexport {\n  sort_objects_by_property,\n  sort_objects_by_property_and_position,\n}\n"]}