{"version":3,"sources":["req.js"],"names":["aggregate_req_body_query","req","query","body","key","val","decodeURIComponent","trim","includes","JSON","parse","e"],"mappings":";AASO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,8BAAA,EAAA,IAAMA,EAA2B,SAAUC,GAC5CC,IAAAA,EAAQ,GAMRD,GAJAA,EAAIE,OACND,EAAQD,EAAIE,MAGVF,EAAIC,MACD,IAAA,IAAIE,KAAOH,EAAIC,MAAO,CACrBG,IAAAA,EAAMJ,EAAIC,MAAME,GAChBC,GAAQ,IAARA,GAIA,GAACA,IACLA,EAAMC,mBAAmBD,GAAKE,QAE1BF,GAAQ,cAARA,EAIAA,GAAQ,SAARA,EAIAA,GAAQ,SAARA,EAIAA,GAAQ,UAARA,EAAAA,CAIA,GAAA,CAAC,IAAK,IAAK,KAAKG,SAASH,EAAI,IAC3B,IACFA,EAAMI,KAAKC,MAAML,GACjB,MAAOM,GACPN,EAAM,GAGVH,EAAME,GAAOC,OAVXH,EAAME,IAAO,OAJbF,EAAME,IAAO,OAJbF,EAAME,GAAO,YAJbF,EAAME,GAAO,iBAPbF,EAAME,GAAO,EAiCZF,OAAAA,GA5CF,QAAA,yBAAA","file":"req.js","sourceRoot":"../src","sourcesContent":["/**\n * Parse and combine POST data and URL params into JavaScript object\n * @param req {object} - IMPORTANT: does not have to be real api request. Can be simple object.\n * @param req.body {object} - key/value pairs, already parsed and ready to use\n * @param req.query {object} - object of key/value pairs from URL query string\n *    This function will decodeURIComponent then parse each value.\n *    These req.query values will override values from req.body!\n * @returns {{}} - combined keys/values. Original request object will NOT be modified.\n */\nexport const aggregate_req_body_query = function (req) {\n  let query = {}\n  // body (POST data)\n  if (req.body) {\n    query = req.body\n  }\n  // query (URL parameters)\n  if (req.query) {\n    for (let key in req.query) {\n      let val = req.query[key]\n      if (val === 0) {\n        query[key] = 0\n        continue\n      }\n      if (!val) continue\n      val = decodeURIComponent(val).trim()\n      if (!val) continue\n      if (val === \"undefined\") {\n        query[key] = \"undefined\"\n        continue\n      }\n      if (val === \"null\") {\n        query[key] = \"null\"\n        continue\n      }\n      if (val === \"true\") {\n        query[key] = true\n        continue\n      }\n      if (val === \"false\") {\n        query[key] = false\n        continue\n      }\n      if (['\"', \"{\", \"[\"].includes(val[0])) {\n        try {\n          val = JSON.parse(val)\n        } catch (e) {\n          val = \"\"\n        }\n      }\n      query[key] = val\n    }\n  }\n  // combined\n  return query\n}\n"]}