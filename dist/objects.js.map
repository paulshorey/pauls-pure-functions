{"version":3,"sources":["objects.js"],"names":["obj_is_equal","obj1","obj2","JSON","stringify","obj_from_array","arr","default_value","obj","obj_first_value","key","val","obj_is_empty","prop","Object","prototype","hasOwnProperty","call","json_parse","value","variable","includes","parse","e","replace","obj_merge","keys","Set","obj1v","obj2v","Array","isArray"],"mappings":"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","file":"objects.js","sourceRoot":"../src","sourcesContent":["/**\n * @param {object} obj1\n * @param {object} obj2\n * @returns {boolean} - true if equal\n */\nexport const obj_is_equal = function obj_is_equal(obj1, obj2) {\n  return JSON.stringify(obj1) === JSON.stringify(obj2)\n}\n\n/**\n * @param {array} arr\n * @returns {object}\n */\nexport const obj_from_array = function obj_from_array(arr, default_value=true) {\n  let obj = {}\n  for (let key of arr) {\n    obj[key] = default_value\n  }\n  return obj\n}\n\n/**\n * @param {object} obj\n * @returns value of first item in object\n */\nexport const obj_first_value = function obj_first_value(obj) {\n  for (let key in obj) {\n    let val = obj[key]\n    return val\n    break // idk, just in case\n  }\n}\n\n/**\n * @param {object} obj\n * @returns {boolean} - true if empty\n */\nexport const obj_is_empty = function obj_is_empty(obj) {\n  for (let prop in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * Parse JSON variable - recursively\n * @param {*} value - Any variable type\n * @returns {*} value - Intelligently parsed. Note: Will convert stringified number to type number!\n * NOTE: JSON can not stringify ES6 types Set and Map. Stringify/parse, changes value to empty object.\n * As a workaround, before stringifying, convert Set to Array, and Map to Array of tuples.\n */\nexport const json_parse = function json_parse(value) {\n  let variable\n  // Simple parse variable\n  if (typeof value === \"string\" && (value.includes(\"[\") || value.includes(\"{\"))) {\n    try {\n      variable = JSON.parse(value) // JSON stringified array or object\n    } catch (e) {\n      try {\n        variable = JSON.parse(value.replace(/[\\r\\n]+/g, \"\").replace(/[\\t]+/g, \" \")) // edge case\n      } catch (e) {\n        variable = value.includes(\"[\") ? [] : {} // broken JSON array or object\n      }\n    }\n  } else if (value === \"true\" || value === \"false\" || \"null\" || \"undefined\") {\n    // boolean/null should NOT have been stringified\n    variable = value // string\n  } else {\n    // simple value (JSON.parse converts numbers in quotes to type number)\n    try {\n      variable = JSON.parse(value) // number\n    } catch (e) {\n      variable = value // string or undefined\n    }\n  }\n  // Parse recursively - if Object/Array\n  if (typeof variable === \"object\") {\n    // iterate all props/values\n    for (let key in variable) {\n      if (!variable.hasOwnProperty(key)) continue\n      // parse each prop/value\n      variable[key] = json_parse(variable[key])\n    }\n  }\n\n  return variable\n}\n\n/**\n * Merge key/values of two objects into one - recursively\n * @param {object} obj1 - First object, the default one\n * @param {object} obj2 - Second object, will overwrite first!\n * @returns {object} obj - Combined object\n */\nexport const obj_merge = function obj_merge(obj1, obj2) {\n  // console.log('obj1', JSON.parse(JSON.stringify(obj1)));\n  // console.log('obj2', JSON.parse(JSON.stringify(obj2)));\n  let obj = {}\n  // get keys from both objects\n  let keys = [...new Set([...Object.keys(obj1), ...Object.keys(obj2)])]\n  for (let key of keys) {\n    // both assigned ? then merge\n    if (obj1.hasOwnProperty(key) && obj2.hasOwnProperty(key)) {\n      let obj1v = obj1[key]\n      let obj2v = obj2[key]\n      // if both objects have same key, then merge\n      if (typeof obj1v !== typeof obj2v) {\n        // oh no! same key, but value is different type!\n        obj[key] = obj2v || obj1v\n        // console.warn('obj_merge(obj1, obj2) could not merge types: key/value type of each must be same: ', typeof obj1v, typeof obj2v);\n      } else {\n        // same type of value - lets try to combine...\n        switch (typeof obj1v) {\n          case \"object\":\n            // type = object\n            if (!!obj2v && !!obj1v) {\n              // both are truthy...\n              if (Array.isArray(obj2v) && Array.isArray(obj1v)) {\n                // both arrays...\n                obj[key] = [...new Set([...obj1[key], ...obj2[key]])]\n              } else if (!Array.isArray(obj2v) && !Array.isArray(obj1v)) {\n                // both dictionaries...\n                obj[key] = obj_merge(obj1[key], obj2[key])\n              } else {\n                // one is dictionary, other is array.\n                // cannot combine unlike types. Use first...\n                obj[key] = obj1[key]\n              }\n            } else {\n              // at least one is null...\n              obj[key] = obj2v || obj1v\n            }\n            break\n          default:\n            // type = undefined, function, boolean, string, number\n            obj[key] = obj2v || obj1v\n            break\n        }\n      }\n    } else if (obj2.hasOwnProperty(key)) {\n      // otherwise, use whichever one has a value\n      obj[key] = obj2[key]\n    } else {\n      // otherwise, use whichever one has a value\n      obj[key] = obj1[key]\n    }\n  }\n  // console.log('obj', obj);\n  return obj\n}\n"]}