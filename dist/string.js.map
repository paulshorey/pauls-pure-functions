{"version":3,"sources":["string.js"],"names":["str_hash","str","hash","length","i","charCodeAt","str_capitalize","word","charAt","toUpperCase","slice","str_sanitize_loosely","replace","toLowerCase","trim","str_sanitize_strictly","str_insert","string","index","insert","substring","str_trim_char","s","c","RegExp","str_trim_non_alpha","str_syllables_count","match"],"mappings":";AAwDO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,oBAAA,QAAA,mBAAA,QAAA,cAAA,QAAA,WAAA,QAAA,sBAAA,QAAA,qBAAA,QAAA,eAAA,QAAA,cAAA,EAxDA,IAAMA,EAAW,SAAUC,GAC5BC,IAAAA,EAAO,EACPD,GAAe,IAAfA,EAAIE,OACCD,OAAAA,EAEJ,IAAA,IAAIE,EAAI,EAAGA,EAAIH,EAAIE,OAAQC,IAAK,CAEnCF,GAAQA,GAAQ,GAAKA,EADVD,EAAII,WAAWD,GAE1BF,GAAcA,EAETA,OAAAA,EAAK,IA8CP,QAAA,SAAA,EA3CA,IAAMI,EAAiB,SAAUC,GAC/BA,OAAAA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,IA0C5C,QAAA,eAAA,EAvCA,IAAMC,EAAuB,SAAUJ,GACrCA,OAAAA,EACJK,QAAQ,MAAO,KACfA,QAAQ,WAAY,IACpBC,cACAC,QAkCE,QAAA,qBAAA,EAhCA,IAAMC,EAAwB,SAAUR,GACtCA,OAAAA,EACJK,QAAQ,UAAW,IACnBC,cACAC,QA4BE,QAAA,sBAAA,EAzBA,IAAME,EAAa,WAAUC,IAAAA,EAAS,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAIC,EAAQ,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAAGC,EAAS,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAC5DF,OAAAA,EAAOG,UAAU,EAAGF,GAASC,EAASF,EAAOG,UAAUF,EAAOD,EAAOd,SAwBvE,QAAA,WAAA,EAfA,IAAMkB,EAAgB,SAAcC,EAAGC,GAGrCD,MAFG,MAANC,IAAWA,EAAI,OACT,OAANA,IAAYA,EAAI,QACbD,EAAEV,QAAQ,IAAIY,OAAO,KAAOD,EAAI,OAASA,EAAI,MAAO,KAAM,KAY5D,QAAA,cAAA,EAJA,IAAME,EAAqB,SAAcxB,GACvCA,OAAAA,EAAIW,QAAQ,IAAIY,OAAO,oBAAqB,MAAO,KAGrD,QAAA,mBAAA,EAAA,IAAME,EAAsB,SAA6BnB,GAE1DA,IADJA,EAAOA,EAAKM,eACHV,QAAU,EACV,OAAA,EAILwB,IAAAA,GADJpB,GADAA,EAAOA,EAAKK,QAAQ,mCAAoC,KAC5CA,QAAQ,KAAM,KACTe,MAAM,kBAChBA,OAAAA,EAAQA,EAAMxB,OAAS,GARzB,QAAA,oBAAA","file":"string.js","sourceRoot":"../src","sourcesContent":["export const str_hash = function (str) {\n  let hash = 0\n  if (str.length === 0) {\n    return hash\n  }\n  for (let i = 0; i < str.length; i++) {\n    let char = str.charCodeAt(i)\n    hash = (hash << 5) - hash + char\n    hash = hash & hash // Convert to 32bit integer\n  }\n  return hash+''\n}\n\nexport const str_capitalize = function (word) {\n  return word.charAt(0).toUpperCase() + word.slice(1)\n}\n\nexport const str_sanitize_loosely = function (word) {\n  return word\n    .replace(/_-/g, \" \")\n    .replace(/[^\\w ]+/g, \"\")\n    .toLowerCase()\n    .trim()\n}\nexport const str_sanitize_strictly = function (word) {\n  return word\n    .replace(/[^\\w]+/g, \"\")\n    .toLowerCase()\n    .trim()\n}\n\nexport const str_insert = function (string = \"\", index = 0, insert = \"\") {\n  return string.substring(0, index) + insert + string.substring(index, string.length)\n}\n\n/**\n * Trim a character other than whitespace\n * @param s {string} - string\n * @param c {string} - remove this character (or characters) from start/end\n * @returns {void | string}\n */\nexport const str_trim_char = function trim(s, c) {\n  if (c === \"]\") c = \"\\\\]\"\n  if (c === \"\\\\\") c = \"\\\\\\\\\"\n  return s.replace(new RegExp(\"^[\" + c + \"]+|[\" + c + \"]+$\", \"g\"), \"\")\n}\n\n/**\n * Trim all non-alphabetical (not a-zA-Z) characters\n * @param str {string} - string\n * @returns {string}\n */\nexport const str_trim_non_alpha = function trim(str) {\n  return str.replace(new RegExp(\"^[^a-z]+|[^a-z]+$\", \"gi\"), \"\")\n}\n\nexport const str_syllables_count = function str_syllables_count(word) {\n  word = word.toLowerCase() //word.downcase!\n  if (word.length <= 3) {\n    return 1\n  } //return 1 if word.length <= 3\n  word = word.replace(/(?:[^laeiouy]es|ed|[^laeiouy]e)$/, \"\") //word.sub!(/(?:[^laeiouy]es|ed|[^laeiouy]e)$/, '')\n  word = word.replace(/^y/, \"\") //word.sub!(/^y/, '')\n  let match = word.match(/[aeiouy]{1,2}/g)\n  return match ? match.length : 0 //word.scan(/[aeiouy]{1,2}/).size\n}\n"]}