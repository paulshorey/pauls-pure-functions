{"version":3,"sources":["string.js","urls.js","requests.js"],"names":["str_hash","str","hash","length","i","charCodeAt","str_capitalize","word","charAt","toUpperCase","slice","str_sanitize_loosely","replace","toLowerCase","trim","str_sanitize_strictly","str_insert","string","index","insert","substring","str_trim_char","s","c","RegExp","str_trim_non_alpha","str_syllables_count","match","querystring_from_object","params","qs","Object","keys","map","k","encodeURIComponent","join","object_from_querystring","obj","pairs","split","pair","tuple","key","decodeURIComponent","querystring_replace_key_value","queryString","value","JSON","parse","decodeURI","output","entries","load_script","source","beforeEl","scriptAttrs","window","document","Promise","resolve","reject","script","createElement","async","defer","onloadHander","_","isAbort","readyState","test","onload","onreadystatechange","undefined","src","body","append","parse_error_message","response","toString","content","data","error","errors","warnings","warning","message","http_get","url","fetch","method","mode","cache","credentials","headers","redirect","referrer","then","json","http_post","stringify","http_put"],"mappings":"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","file":"requests.js","sourceRoot":"../src","sourcesContent":["export const str_hash = function (str) {\n  let hash = 0\n  if (str.length === 0) {\n    return hash\n  }\n  for (let i = 0; i < str.length; i++) {\n    let char = str.charCodeAt(i)\n    hash = (hash << 5) - hash + char\n    hash = hash & hash // Convert to 32bit integer\n  }\n  return hash+''\n}\n\nexport const str_capitalize = function (word) {\n  return word.charAt(0).toUpperCase() + word.slice(1)\n}\n\nexport const str_sanitize_loosely = function (word) {\n  return word\n    .replace(/_-/g, \" \")\n    .replace(/[^\\w ]+/g, \"\")\n    .toLowerCase()\n    .trim()\n}\nexport const str_sanitize_strictly = function (word) {\n  return word\n    .replace(/[^\\w]+/g, \"\")\n    .toLowerCase()\n    .trim()\n}\n\nexport const str_insert = function (string = \"\", index = 0, insert = \"\") {\n  return string.substring(0, index) + insert + string.substring(index, string.length)\n}\n\n/**\n * Trim a character other than whitespace\n * @param s {string} - string\n * @param c {string} - remove this character (or characters) from start/end\n * @returns {void | string}\n */\nexport const str_trim_char = function trim(s, c) {\n  if (c === \"]\") c = \"\\\\]\"\n  if (c === \"\\\\\") c = \"\\\\\\\\\"\n  return s.replace(new RegExp(\"^[\" + c + \"]+|[\" + c + \"]+$\", \"g\"), \"\")\n}\n\n/**\n * Trim all non-alphabetical (not a-zA-Z) characters\n * @param str {string} - string\n * @returns {string}\n */\nexport const str_trim_non_alpha = function trim(str) {\n  return str.replace(new RegExp(\"^[^a-z]+|[^a-z]+$\", \"gi\"), \"\")\n}\n\nexport const str_syllables_count = function str_syllables_count(word) {\n  word = word.toLowerCase() //word.downcase!\n  if (word.length <= 3) {\n    return 1\n  } //return 1 if word.length <= 3\n  word = word.replace(/(?:[^laeiouy]es|ed|[^laeiouy]e)$/, \"\") //word.sub!(/(?:[^laeiouy]es|ed|[^laeiouy]e)$/, '')\n  word = word.replace(/^y/, \"\") //word.sub!(/^y/, '')\n  let match = word.match(/[aeiouy]{1,2}/g)\n  return match ? match.length : 0 //word.scan(/[aeiouy]{1,2}/).size\n}\n","import { str_trim_char } from \"./string.js\"\n\n/**\n * Convert JavaScript Object to URL querystring\n * ex: \"?one=1&two=something\"\n */\nexport function querystring_from_object(params = {}) {\n  let qs = Object.keys(params)\n    .map((k) => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\n    .join(\"&\")\n  if (qs) {\n    qs = \"?\" + qs\n  }\n  return qs\n}\n\n/**\n * Convert URL querystring to JavaScript Object\n * ex: \"?one=1&two=something\" => {one:1,two:'something'}\n */\nexport function object_from_querystring(str = \"\") {\n  // make object\n  let obj = {}\n  let pairs = str.replace(\"?\", \"\").split(\"&\")\n  for (let pair of pairs) {\n    if (!pair) continue\n    let tuple = pair.split(\"=\")\n    let key = tuple[0]\n    if (!key) continue\n    obj[key] = tuple[1] || \"\"\n  }\n  // decode value\n  for (let key in obj) {\n    obj[key] = decodeURIComponent(obj[key] || \"\").trim()\n  }\n  // done\n  return obj\n}\n\n/**\n * Change a url (GET) parameter in queryString string\n * @param queryString {string} - ex: \"?start=10&fruit=apple\"\n * @param key {string} - ex: \"fruit\"\n * @param value {string} - ex: \"species\"\n * @return {string} - ex: \"?start=10&species=apple\"\n */\nexport function querystring_replace_key_value(queryString, key, value) {\n  // clean input\n  queryString = str_trim_char(queryString, \"&\")\n  queryString = str_trim_char(queryString, \"?\")\n  let obj = JSON.parse(\n    '{\"' + decodeURI(queryString).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"') + '\"}'\n  )\n  // replace value\n  obj[key] = value\n  // rebuild queryString with replaced value\n  let output = \"?\"\n  for (let pair of Object.entries(obj)) {\n    output += pair[0] + \"=\"\n    output += pair[1] + \"&\"\n  }\n  return str_trim_char(output, \"&\")\n}\n","import { querystring_from_object } from \"./urls.js\"\n\n/**\n * Parse Axios error message\n * @param {string} source - external URL to load\n * @param {object} beforeEl - DOM element before which to insert the new <script> tag\n * @param {object} scriptAttrs - object of attributes to add to the new <script> tag\n */\nexport const load_script = function (source, beforeEl, scriptAttrs = {}) {\n  if (!source) return false\n  if (typeof window !== \"object\" || typeof document !== \"object\") return false\n  return new Promise((resolve, reject) => {\n    let script = document.createElement(\"script\")\n\n    // force certain attributes\n    script.async = true\n    script.defer = true\n    for (let key in scriptAttrs) {\n      script[key] = scriptAttrs[key]\n    }\n\n    // NOTE: needs refactor: maybe .bind(script)\n    function onloadHander(_, isAbort) {\n      if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {\n        script.onload = null\n        script.onreadystatechange = null\n        script = undefined\n\n        if (isAbort) {\n          reject()\n        } else {\n          resolve()\n        }\n      }\n    }\n\n    script.onload = onloadHander\n    script.onreadystatechange = onloadHander\n\n    script.src = source\n    window.document.body.append(script)\n    resolve(true)\n  })\n}\n\n/**\n * Parse simple message string from HTTP JSON response, GraphQL, or Error() object\n *    Too many libraries to fetch HTTP requests, too many non-standard response formats.\n *    This handles Axios or standard XMLHTTPRequest, or an Error() object\n *    Supports either convention, of Twitter or Facebook\n *    Supports \"non-legacy\" format described in: https://www.mediawiki.org/wiki/API:Errors_and_warnings\n *    Response and parsed error can be any type. This will figure it out, with just a few if/else rules.\n *      NOTE:\n *      Unless you don't care about performance, this should NOT be used to detect if a variable is an error,\n *      only to parse the message string from some object/response which you know contains an error message.\n * @param {object} response - response from HTTP request or Error object\n * @returns {string} - nice readable text, meant for an alert popup in your front-end user interface\n */\nexport const parse_error_message = function (response) {\n  if (!response) return \"!error\"\n  //\n  // maybe input was a string, which is already an error message,\n  // or null/undefined/false, whatever, just output that as is\n  if (typeof response !== \"object\") return response.toString()\n  //\n  // content from HTTP response:\n  let content = response.response\n    ? response.response.data\n      ? response.response.data\n      : response.response\n    : response.data || response\n  //\n  // error object:\n  let error = content\n  if (content.errors) error = content.errors[0] || content.errors\n  else if (content.warnings) error = content.warnings[0] || content.warnings\n  else if (content.error) error = content.error\n  else if (content.warning) error = content.warning\n  //\n  // something weird:\n  if (typeof error !== \"object\") return error.toString()\n  //\n  // JS Error object - cut off extra stuff about files/lines:\n  if (error[0] && error[0].length > 3) return error[0]\n  //\n  // JSON object:\n  return error.message || error.toString()\n}\n\n/**\n * GET request\n * @param {string} url\n * @param {object} data\n * @returns {Promise}\n */\nexport const http_get = function (url = ``, data = {}) {\n  // Auth\n  // url = url;\n  // Default options are marked with *\n  return fetch(url + querystring_from_object(data), {\n    method: \"GET\", // *GET, POST, PUT, DELETE, etc.\n    mode: \"cors\", // no-cors, cors, *same-origin\n    cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: \"same-origin\", // include, *same-origin, omit\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n      // \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    redirect: \"follow\", // manual, *follow, error\n    referrer: \"no-referrer\" // no-referrer, *client\n  })\n    .then((response) => response.json()) // parses response to JSON\n    .then((response) => response.data)\n}\n\n/**\n * POST request\n * @param {string} url\n * @param {object} data\n * @returns {Promise}\n */\nexport const http_post = function (url = ``, data = {}) {\n  // Auth\n  // url = url;\n  // Default options are marked with *\n  return fetch(url, {\n    method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n    mode: \"cors\", // no-cors, cors, *same-origin\n    cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: \"same-origin\", // include, *same-origin, omit\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n      // \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    redirect: \"follow\", // manual, *follow, error\n    referrer: \"no-referrer\", // no-referrer, *client\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n  }).then((response) => response.json()) // parses response to JSON\n}\n\n/**\n * PUT request\n * @param {string} url\n * @param {object} data\n * @returns {Promise}\n */\nexport const http_put = function (url = ``, data = {}) {\n  // Auth\n  // url = url;\n  // Default options are marked with *\n  return fetch(url, {\n    method: \"PUT\", // *GET, POST, PUT, DELETE, etc.\n    mode: \"cors\", // no-cors, cors, *same-origin\n    cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: \"same-origin\", // include, *same-origin, omit\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n      // \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    redirect: \"follow\", // manual, *follow, error\n    referrer: \"no-referrer\", // no-referrer, *client\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n  }).then((response) => response.json()) // parses response to JSON\n}\n"]}