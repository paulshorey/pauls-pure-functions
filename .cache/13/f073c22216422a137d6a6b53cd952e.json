{"id":"guaG","dependencies":[{"name":"/srv/public/files/universal-common-scripts/package.json","includedInParent":true,"mtime":1605471894880},{"name":"process","parent":"/srv/public/files/universal-common-scripts/src/functions.js","resolved":"/srv/public/files/universal-common-scripts/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\nvar o=require(\"process\");Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.anonFunction=void 0;var e=function(e,r){try{e()}catch(n){cconsole?cconsole.error(n):console.error(n),\"exit\"===r&&void 0!==o&&o.exit()}};exports.anonFunction=e;"},"sourceMaps":{"js":{"mappings":[{"source":"functions.js","original":{"line":9,"column":7},"generated":{"line":2,"column":0}},{"source":"functions.js","original":{"line":9,"column":7},"generated":{"line":2,"column":4}},{"source":"functions.js","original":{"line":9,"column":7},"generated":{"line":2,"column":6}},{"source":"functions.js","original":{"line":9,"column":7},"generated":{"line":2,"column":14}},{"source":"functions.js","original":{"line":9,"column":7},"generated":{"line":2,"column":25}},{"source":"functions.js","original":{"line":9,"column":7},"generated":{"line":2,"column":32}},{"source":"functions.js","original":{"line":9,"column":7},"generated":{"line":2,"column":47}},{"source":"functions.js","original":{"line":9,"column":7},"generated":{"line":2,"column":55}},{"source":"functions.js","original":{"line":9,"column":7},"generated":{"line":2,"column":68}},{"source":"functions.js","original":{"line":9,"column":7},"generated":{"line":2,"column":69}},{"source":"functions.js","original":{"line":9,"column":7},"generated":{"line":2,"column":76}},{"source":"functions.js","original":{"line":9,"column":7},"generated":{"line":2,"column":80}},{"source":"functions.js","original":{"line":9,"column":7},"generated":{"line":2,"column":88}},{"source":"functions.js","original":{"line":9,"column":7},"generated":{"line":2,"column":106}},{"source":"functions.js","original":{"line":9,"column":7},"generated":{"line":2,"column":108}},{"source":"functions.js","name":"anonFunction","original":{"line":9,"column":13},"generated":{"line":2,"column":112}},{"source":"functions.js","original":{"line":9,"column":28},"generated":{"line":2,"column":114}},{"source":"functions.js","name":"tryCode","original":{"line":9,"column":29},"generated":{"line":2,"column":123}},{"source":"functions.js","name":"catchAction","original":{"line":9,"column":38},"generated":{"line":2,"column":125}},{"source":"functions.js","original":{"line":10,"column":6},"generated":{"line":2,"column":128}},{"source":"functions.js","name":"tryCode","original":{"line":12,"column":4},"generated":{"line":2,"column":132}},{"source":"functions.js","original":{"line":13,"column":4},"generated":{"line":2,"column":136}},{"source":"functions.js","name":"err","original":{"line":13,"column":11},"generated":{"line":2,"column":142}},{"source":"functions.js","name":"cconsole","original":{"line":15,"column":4},"generated":{"line":2,"column":145}},{"source":"functions.js","name":"cconsole","original":{"line":15,"column":15},"generated":{"line":2,"column":154}},{"source":"functions.js","name":"error","original":{"line":15,"column":24},"generated":{"line":2,"column":163}},{"source":"functions.js","name":"err","original":{"line":15,"column":30},"generated":{"line":2,"column":169}},{"source":"functions.js","name":"console","original":{"line":15,"column":37},"generated":{"line":2,"column":172}},{"source":"functions.js","name":"error","original":{"line":15,"column":45},"generated":{"line":2,"column":180}},{"source":"functions.js","name":"err","original":{"line":15,"column":51},"generated":{"line":2,"column":186}},{"source":"functions.js","original":{"line":17,"column":24},"generated":{"line":2,"column":189}},{"source":"functions.js","name":"catchAction","original":{"line":17,"column":8},"generated":{"line":2,"column":198}},{"source":"functions.js","original":{"line":17,"column":53},"generated":{"line":2,"column":206}},{"source":"functions.js","name":"process","original":{"line":17,"column":41},"generated":{"line":2,"column":210}},{"source":"functions.js","name":"process","original":{"line":19,"column":6},"generated":{"line":2,"column":213}},{"source":"functions.js","name":"exit","original":{"line":19,"column":14},"generated":{"line":2,"column":215}},{"source":"functions.js","original":{"line":9,"column":7},"generated":{"line":2,"column":224}},{"source":"functions.js","original":{"line":9,"column":7},"generated":{"line":2,"column":232}},{"source":"functions.js","original":{"line":9,"column":7},"generated":{"line":2,"column":245}}],"sources":{"functions.js":"/**\n * Anonymous function wrapper - more reliable than ;(()=>{ ... })()\n *    Probem is anonymous function sometimes fails silently, even in try/catch !\n *    This try/catch implementation is more reliable.\n *    Also, don't need leading semicolon, if you're into not using semicolons.\n * @param tryCode\n * @param catchAction\n */\nexport const anonFunction = (tryCode, catchAction) => {\n  try {\n    // hopefully it works:\n    tryCode()\n  } catch (err) {\n    // something broke!\n    cconsole ? cconsole.error(err) : console.error(err)\n    // stop and inspect\n    if (catchAction === \"exit\" && typeof process !== \"undefined\") {\n      // exit\n      process.exit()\n    } else {\n      // debug\n      debugger\n    }\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"61c6a49b6937aeddb794e58f74a534c1","cacheData":{"env":{}}}