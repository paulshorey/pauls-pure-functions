{"id":"kEn8","dependencies":[{"name":"/srv/public/files/universal-common-scripts/package.json","includedInParent":true,"mtime":1605471894880}],"generated":{"js":"\"use strict\";function e(e,n){return e.sort(t.bind(n))}function t(e,t){return this.indexOf(e.substr(e.indexOf(\".\")+1))-this.indexOf(t.substr(t.indexOf(\".\")+1))}Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=e;"},"sourceMaps":{"js":{"mappings":[{"source":"asort_strings/asort_by_extension.js","original":{"line":16,"column":1},"generated":{"line":1,"column":0}},{"source":"asort_strings/asort_by_extension.js","original":{"line":8,"column":15},"generated":{"line":1,"column":13}},{"source":"asort_strings/asort_by_extension.js","name":"asort_by_extension","original":{"line":8,"column":24},"generated":{"line":1,"column":22}},{"source":"asort_strings/asort_by_extension.js","name":"arr","original":{"line":8,"column":43},"generated":{"line":1,"column":24}},{"source":"asort_strings/asort_by_extension.js","name":"endings","original":{"line":8,"column":48},"generated":{"line":1,"column":26}},{"source":"asort_strings/asort_by_extension.js","name":"arr","original":{"line":9,"column":8},"generated":{"line":1,"column":29}},{"source":"asort_strings/asort_by_extension.js","name":"arr","original":{"line":9,"column":8},"generated":{"line":1,"column":36}},{"source":"asort_strings/asort_by_extension.js","name":"sort","original":{"line":9,"column":12},"generated":{"line":1,"column":38}},{"source":"asort_strings/asort_by_extension.js","name":"asort_by_extension__helper","original":{"line":9,"column":17},"generated":{"line":1,"column":43}},{"source":"asort_strings/asort_by_extension.js","name":"bind","original":{"line":9,"column":44},"generated":{"line":1,"column":45}},{"source":"asort_strings/asort_by_extension.js","name":"endings","original":{"line":9,"column":49},"generated":{"line":1,"column":50}},{"source":"asort_strings/asort_by_extension.js","original":{"line":12,"column":0},"generated":{"line":1,"column":54}},{"source":"asort_strings/asort_by_extension.js","name":"asort_by_extension__helper","original":{"line":12,"column":9},"generated":{"line":1,"column":63}},{"source":"asort_strings/asort_by_extension.js","name":"a","original":{"line":12,"column":36},"generated":{"line":1,"column":65}},{"source":"asort_strings/asort_by_extension.js","name":"b","original":{"line":12,"column":39},"generated":{"line":1,"column":67}},{"source":"asort_strings/asort_by_extension.js","name":"a_score","original":{"line":15,"column":8},"generated":{"line":1,"column":70}},{"source":"asort_strings/asort_by_extension.js","original":{"line":13,"column":15},"generated":{"line":1,"column":77}},{"source":"asort_strings/asort_by_extension.js","name":"indexOf","original":{"line":13,"column":20},"generated":{"line":1,"column":82}},{"source":"asort_strings/asort_by_extension.js","name":"a","original":{"line":13,"column":28},"generated":{"line":1,"column":90}},{"source":"asort_strings/asort_by_extension.js","name":"substr","original":{"line":13,"column":30},"generated":{"line":1,"column":92}},{"source":"asort_strings/asort_by_extension.js","name":"a","original":{"line":13,"column":37},"generated":{"line":1,"column":99}},{"source":"asort_strings/asort_by_extension.js","name":"indexOf","original":{"line":13,"column":39},"generated":{"line":1,"column":101}},{"source":"asort_strings/asort_by_extension.js","original":{"line":13,"column":47},"generated":{"line":1,"column":109}},{"source":"asort_strings/asort_by_extension.js","original":{"line":13,"column":54},"generated":{"line":1,"column":114}},{"source":"asort_strings/asort_by_extension.js","original":{"line":14,"column":15},"generated":{"line":1,"column":118}},{"source":"asort_strings/asort_by_extension.js","name":"indexOf","original":{"line":14,"column":20},"generated":{"line":1,"column":123}},{"source":"asort_strings/asort_by_extension.js","name":"b","original":{"line":14,"column":28},"generated":{"line":1,"column":131}},{"source":"asort_strings/asort_by_extension.js","name":"substr","original":{"line":14,"column":30},"generated":{"line":1,"column":133}},{"source":"asort_strings/asort_by_extension.js","name":"b","original":{"line":14,"column":37},"generated":{"line":1,"column":140}},{"source":"asort_strings/asort_by_extension.js","name":"indexOf","original":{"line":14,"column":39},"generated":{"line":1,"column":142}},{"source":"asort_strings/asort_by_extension.js","original":{"line":14,"column":47},"generated":{"line":1,"column":150}},{"source":"asort_strings/asort_by_extension.js","original":{"line":14,"column":54},"generated":{"line":1,"column":155}},{"source":"asort_strings/asort_by_extension.js","original":{"line":16,"column":1},"generated":{"line":1,"column":159}},{"source":"asort_strings/asort_by_extension.js","original":{"line":16,"column":1},"generated":{"line":1,"column":166}},{"source":"asort_strings/asort_by_extension.js","original":{"line":16,"column":1},"generated":{"line":1,"column":181}},{"source":"asort_strings/asort_by_extension.js","original":{"line":16,"column":1},"generated":{"line":1,"column":189}},{"source":"asort_strings/asort_by_extension.js","original":{"line":16,"column":1},"generated":{"line":1,"column":202}},{"source":"asort_strings/asort_by_extension.js","original":{"line":16,"column":1},"generated":{"line":1,"column":203}},{"source":"asort_strings/asort_by_extension.js","original":{"line":16,"column":1},"generated":{"line":1,"column":210}},{"source":"asort_strings/asort_by_extension.js","original":{"line":16,"column":1},"generated":{"line":1,"column":214}},{"source":"asort_strings/asort_by_extension.js","original":{"line":16,"column":1},"generated":{"line":1,"column":222}},{"source":"asort_strings/asort_by_extension.js","original":{"line":16,"column":1},"generated":{"line":1,"column":230}}],"sources":{"asort_strings/asort_by_extension.js":"/**\n * Used to sort a list of domain names by their domain extension - putting best ones higher in list.\n * @param arr {Array<String>} - list of strings - each string must contain at least one period \".\"\n *      NOTE: this function modifies the original array, using .sort()!\n * @param endings {array} - list of endings (domain extensions) to sort by. Best = first. Worst = last.\n * @returns {array} - sorted array\n */\nexport default function asort_by_extension(arr, endings) {\n\treturn arr.sort(asort_by_extension__helper.bind(endings));\n};\n\nfunction asort_by_extension__helper(a, b) {\n\tlet a_score = this.indexOf(a.substr(a.indexOf('.') + 1));\n\tlet b_score = this.indexOf(b.substr(b.indexOf('.') + 1));\n\treturn a_score - b_score;\n}\n"},"lineCount":null}},"error":null,"hash":"1ce217e1eab94fe6eae2560960b713ba","cacheData":{"env":{}}}